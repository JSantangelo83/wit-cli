#!/bin/bash

wit_yaml="./wit.yaml"

check_dependencies() {
    local missing=()
    local dependencies=("yq")

    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing+=("$cmd")
        fi
    done

    if [ "${#missing[@]}" -gt 0 ]; then
        /bin/echo "[-] The following required command(s) are missing:"
        for cmd in "${missing[@]}"; do
            /bin/echo "  - $cmd"
        done
        /bin/echo "[-] Please install them and try again."
        exit 1
    fi
}

get_port() {
    while :; do
        port=$(shuf -i 2000-65000 -n 1)
        if ! ss -tuln | awk '{print $5}' | grep -q ":$port\$"; then
            echo "$port"
            return
        fi
    done
}


help() {
    /bin/echo "Usage: $0 [COMMAND | OPTION] [ARGS...]"
    /bin/echo
    /bin/echo "Commands and Options:"
    /bin/echo "  update        --update,  -u           Update the services (WILL DISABLE)"
    /bin/echo "  install       --install, -i [PKGS...] Install one or more services"
    /bin/echo "  help          --help,    -h           Show this help message"
    /bin/echo
    /bin/echo "Examples:"
    /bin/echo "  $0 update"
    /bin/echo "  $0 -u"
    /bin/echo "  $0 install service1 service2"
    /bin/echo "  $0 -i service1"
}

update(){
    check_dependencies;
}

install(){
    check_dependencies;
    
    service="$1"
    if ! [ -n $service ]; then
        help;
        exit 1;
    fi

    giturl="$(yq -r ".services[\"$service\"].giturl" $wit_yaml)"
    reponame=$(echo "$giturl" | grep -oE '[^/]+\.git$' | sed 's/\.git$//')

    if ! [-n $giturl ]; then
        /bin/echo '[x] Service not found';
        exit 1;
    fi

    user="$service"

    /bin/sudo su

    # Create user if it doesn't exist
    if ! /bin/id "$user" &>/dev/null; then
        /bin/echo "[+] Creating user: $user"
        /bin/useradd -m "$user"
    else
        /bin/echo "[!] User $user already exists"
    fi

    # Ensure user is in required groups
    for group in gitdeploy docker; do
        if ! id -nG "$user" | grep -qw "$group"; then
            /bin/echo "[+] Adding $user to $group group"
            /bin/usermod -aG "$group" "$user"
        fi
    done
    
    home="/home/$user"
    
    # Install ssh config to use gitdeploy's key
    /bin/sudo -u "$user" -H /bin/ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N "" -q
    echo -e '[+] Generated keys:\n'
    /bin/sudo -u "$user" -H /bin/cat $home/.ssh/id_rsa.pub
    # Show key and wait for user input to continue
    echo -e "\nPress Enter after you added the key as a Deploy Key on Github..."
    read

    # Clone repo
    if [ ! -d "$home/$reponame/.git" ]; then
        /bin/echo "[+] Cloning $giturl"
        /bin/sudo -u "$user" -H git clone "$giturl" "$home/$reponame"
    else
        /bin/echo "[!] Repo already exists: $home/$reponame"
    fi

    # Import conf file

    dns="$reponame"
    service="$reponame.service"
    port="$(get_port)"
    name="$reponame"
    description=""

    # Load overrides from file if it exists
    conf_file="$home/$reponame/wit.conf"
    if [ -f "$conf_file" ]; then
        # shellcheck source=/dev/null
        source "$conf_file"
    else
        /bin/echo "[!] Config file not found: $conf_file. Using defaults."
    fi

    # Install and run service
    if ! [ -f "$home/.config/systemd/user/$service" ]; then
        /bin/sudo -u "$user" -H /bin/mkdir -p $home/.config/systemd/user
        /bin/sudo -u "$user" -H /bin/cp "$home/$reponame/$service" "$home/.config/systemd/user/"
    fi

    /bin/sudo -u "$user" -H /bin/systemctl --user daemon-reload
    /bin/sudo -u "$user" -H /bin/systemctl --user enable $(basename $service)
    /bin/sudo -u "$user" -H /bin/systemctl --user start $(basename $service)

    # If not running, stop
    if ! /bin/sudo -u "$user" -H /bin/systemctl --user start "$(basename "$service")"; then
        /bin/echo "[x] Failed to start the service"
        /bin/sudo -u "$user" -H /bin/systemctl --user status "$(basename "$service")"
        exit 1
    fi

    /bin/echo "[+] Service started successfully"
    
    # If running, route it through Cloudflare
    /bin/cat <<EOF | /bin/sudo /bin/tee -a /etc/cloudflare/config.yml > /dev/null
  - hostname: $dns.witjt.org
    service: http://localhost:$port
EOF

    /bin/cloudflared tunnel route dns wit-shared "$dns.witjt.org"
    
}

case "$1" in
    update|-u|--update)
        update
        ;;
    install|-i|--install)
        install $2
        ;;
    help|-h|--help|"")
        help
        ;;
    *)
        /bin/echo "Unknown command: $1"
        help
        exit 1
        ;;
esac

