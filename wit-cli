#!/bin/bash

wit_yaml="./wit.yaml"

check_dependencies() {
    local missing=()
    local dependencies=("yq")

    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing+=("$cmd")
        fi
    done

    if [ "${#missing[@]}" -gt 0 ]; then
        echo "[-] The following required command(s) are missing:"
        for cmd in "${missing[@]}"; do
            echo "  - $cmd"
        done
        echo "[-] Please install them and try again."
        exit 1
    fi
}

get_port() {
    while :; do
        port=$(shuf -i 2000-65000 -n 1)
        if ! ss -tuln | awk '{print $5}' | grep -q ":$port\$"; then
            echo "$port"
            return
        fi
    done
}

help() {
    echo "Usage: $0 [COMMAND | OPTION] [ARGS...]"
    echo
    echo "Commands and Options:"
    echo "  update        --update,  -u           Update the services (WILL DISABLE)"
    echo "  install       --install, -i [PKGS...] Install one or more services"
    echo "  help          --help,    -h           Show this help message"
    echo
    echo "Examples:"
    echo "  $0 update"
    echo "  $0 -u"
    echo "  $0 install service1 service2"
    echo "  $0 -i service1"
}

update(){
    check_dependencies;
}

install(){
    check_dependencies;

    service="$1"
    if ! [ -n "$service" ]; then
        help;
        exit 1;
    fi

    giturl="$(yq -r ".services[\"$service\"].giturl" $wit_yaml)"
    reponame=$(echo "$giturl" | grep -oE '[^/]+\.git$' | sed 's/\.git$//')

    if ! [ -n "$giturl" ]; then
        echo '[x] Service not found';
        exit 1;
    fi

    user="$service"

    # Create user if it doesn't exist
    if ! id "$user" &>/dev/null; then
        echo "[+] Creating user: $user"
        sudo useradd -m "$user"
        echo -e "root\nroot" | (sudo passwd "$user")
    else
        echo "[!] User $user already exists"
    fi

    # Ensure user is in required groups
    # Done like this for better scalability
    for group in docker; do
        if ! id -nG "$user" | grep -qw "$group"; then
            echo "[+] Adding $user to $group group"
            sudo usermod -aG "$group" "$user"
        fi
    done

    home="/home/$user"

    # Install ssh key if it doesn't exist
    if ! sudo -u "$user" test -f "$home/.ssh/id_rsa"; then
        echo "[+] Generating SSH key for $user"
        sudo -u "$user" -H mkdir -p "$home/.ssh"
        sudo -u "$user" -H ssh-keygen -t rsa -b 2048 -f "$home/.ssh/id_rsa" -N "" -q

        echo -e '[+] Public key:\n'
        sudo -u "$user" -H cat "$home/.ssh/id_rsa.pub"

        echo -e "\nPress Enter after you added the key as a Deploy Key on Github..."
        read
    else
        echo "[!] SSH key already exists for $user"
    fi

    # Clone repo
    if [ ! -d "$home/$reponame/.git" ]; then
        echo "[+] Cloning $giturl"
        sudo -u "$user" -H git clone "$giturl" "$home/$reponame"
    else
        echo "[!] Repo already exists: $home/$reponame"
    fi

    # Import conf file

    dns="$reponame"
    service="$reponame.service"
    port="$(get_port)"
    name="$reponame"
    description=""

    # Load overrides from file if it exists
    conf_file="$home/$reponame/wit.conf"
    if [ -f "$conf_file" ]; then
        # shellcheck source=/dev/null
        source "$conf_file"
    else
        echo "[!] Config file not found: $conf_file. Using defaults."
    fi

    # Install and run service
    service_name="$(basename "$service")"
    user_systemd_dir="$home/.config/systemd/user"

    sudo loginctl enable-linger "$user"

    uid=$(id -u "$user")
    userenv=(sudo -u "$user" env XDG_RUNTIME_DIR="/run/user/$uid")

    if ! "${userenv[@]}" test -f "$user_systemd_dir/$service_name"; then
        echo "[+] Installing systemd service for $user"
        "${userenv[@]}" mkdir -p "$user_systemd_dir"
        "${userenv[@]}" cp "$home/$reponame/$service" "$user_systemd_dir/"
    else
        echo "[!] Service already installed: $user_systemd_dir/$service_name"
    fi

    echo "[+] Reloading user systemd daemon"
    "${userenv[@]}" systemctl --user daemon-reload

    echo "[+] Checking if service is enabled"
    if ! "${userenv[@]}" systemctl --user is-enabled "$service_name" >/dev/null 2>&1; then
        echo "[+] Enabling service $service_name"
        if ! "${userenv[@]}" systemctl --user enable "$service_name"; then
            echo "[x] Failed to enable service: $service_name"
            exit 1
        fi
    else
        echo "[!] Service $service_name already enabled"
    fi

    echo "[+] Checking if service is active"
    if ! "${userenv[@]}" systemctl --user is-active "$service_name" >/dev/null 2>&1; then
        echo "[+] Starting service $service_name"
        if ! "${userenv[@]}" systemctl --user start "$service_name"; then
            echo "[x] Failed to start the service"
            echo "[i] Service status:"
            "${userenv[@]}" systemctl --user status "$service_name"
            exit 1
        fi
    else
        echo "[!] Service $service_name already running"
    fi

    echo "[+] Service is enabled and running"



    # If running, route it through Cloudflare
    echo "[+] Adding entry to /etc/cloudflared/config.yml"

    sudo yq -y -i '
        .ingress |= ((.[0:-1]) + [{"hostname": "'$dns'.witjt.org", "service": "http://localhost:'$port'"}] + [.[-1]])
    ' /etc/cloudflared/config.yml
    
    echo "[+] Adding route dns to 'wit-shared' tunnel"
    
    sudo cloudflared tunnel route dns wit-shared "$dns.witjt.org"
    
    echo "[+] Restarting cloudflared service"
    sudo systemctl restart cloudflared
}

case "$1" in
    update|-u|--update)
        update
        ;;
    install|-i|--install)
        install "$2"
        ;;
    help|-h|--help|"")
        help
        ;;
    *)
        echo "Unknown command: $1"
        help
        exit 1
        ;;
esac
